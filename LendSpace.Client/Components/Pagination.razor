@inherits ComponentBase

<div class="w-fit flex flex-row shadow items-center justify-center">
    <!-- Prev button -->
    <button class="bg-white p-2 hover:bg-gray-100 cursor-pointer"
            @onclick="PrevPage"
            disabled="@(CurrentPage <= 1)">
        Prev
    </button>

    <!-- Page number buttons -->
    @foreach (var pageNumber in DisplayedPages())
    {
        if (CurrentPage == pageNumber)
        {
            <button class="border-l border-r border-gray-100 bg-emerald-600 text-white p-2 cursor-pointer">
                @pageNumber
            </button>
        }
        else
        {
            <button class="border-l border-r border-gray-100 bg-white p-2 hover:bg-gray-100 cursor-pointer"
                    @onclick="() => SetPage(pageNumber)">
                @pageNumber
            </button>
        }
    }

    <!-- Next button -->
    <button class="bg-white p-2 hover:bg-gray-100 cursor-pointer"
            @onclick="NextPage"
            disabled="@(CurrentPage >= TotalPages)">
        Next
    </button>
</div>

@code {
    /// <summary>
    /// Total number of pages.
    /// </summary>
    [Parameter]
    public required int TotalPages { get; set; } = 1;

    /// <summary>
    /// The current page (supports two-way binding).
    /// </summary>
    [Parameter]
    public int CurrentPage { get; set; } = 1;

    /// <summary>
    /// When CurrentPage is updated, notify parent components.
    /// </summary>
    [Parameter]
    public EventCallback<int> CurrentPageChanged { get; set; }

    /// <summary>
    /// Set the page, ensuring the value is within valid bounds.
    /// </summary>
    private async Task SetPage(int page)
    {
        if (page < 1)
        {
            page = 1;
        }
        else if (page > TotalPages)
        {
            page = TotalPages;
        }

        if (CurrentPage != page)
        {
            CurrentPage = page;
            await CurrentPageChanged.InvokeAsync(page);
            StateHasChanged();
        }
    }

    /// <summary>
    /// Navigates to the previous page if available.
    /// </summary>
    private async Task PrevPage()
    {
        if (CurrentPage > 1)
        {
            await SetPage(CurrentPage - 1);
        }
    }

    /// <summary>
    /// Navigates to the next page if available.
    /// </summary>
    private async Task NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            await SetPage(CurrentPage + 1);
        }
    }

    /// <summary>
    /// Computes a sliding window of page numbers to display.
    /// Always returns only 5 page numbers (or fewer if TotalPages is less than 5).
    /// </summary>
    private IEnumerable<int> DisplayedPages()
    {
        int maxButtons = 5;
        int startPage = 1;
        int endPage = TotalPages;

        if (TotalPages > maxButtons)
        {
            // Try to center the current page.
            startPage = CurrentPage - 2;
            if (startPage < 1)
            {
                startPage = 1;
            }
            endPage = startPage + maxButtons - 1;
            if (endPage > TotalPages)
            {
                endPage = TotalPages;
                startPage = Math.Max(1, endPage - maxButtons + 1);
            }
        }

        for (int i = startPage; i <= endPage; i++)
        {
            yield return i;
        }
    }
}