@page "/Login"

@inject ILogger<Login> Logger
@inject SignInManager<UserModel> SignInManager
@inject UserManager<UserModel> UserManager
@inject AuthenticationStateProvider AuthenticationState
@inject NavigationManager Navigation

<PageTitle>Sign-In</PageTitle>

<div class="h-full bg-gray-100 flex items-center justify-center">
	<EditForm FormName="Login" Model="Model" OnValidSubmit="HandleValidSubmit" class="bg-white bg-opacity-90 backdrop-blur-sm p-8 rounded-xl shadow-lg w-full max-w-md relative transition-all duration-300 hover:shadow-xl">
		<DataAnnotationsValidator />
		<ValidationSummary class="mb-4" />

		<!-- Exit Button -->
		<div class="absolute top-4 right-4">
			<a href="/" class="text-gray-600 hover:text-red-500 transition-transform duration-200 hover:scale-110">
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-3xl">
					<circle cx="12" cy="12" r="10"></circle>
					<line x1="15" y1="9" x2="9" y2="15"></line>
					<line x1="9" y1="9" x2="15" y2="15"></line>
				</svg>
			</a>
		</div>

		<!-- Logo -->
		<div class="flex justify-center mb-8">
			<img src="image/logo.png" alt="Company Logo" class="h-16 w-auto">
		</div>

		<!-- Display custom error message if login fails -->
		@if (!string.IsNullOrEmpty(loginError))
		{
			<div class="mb-6 p-3 bg-red-100 border-l-4 border-red-500 text-red-700">
				<p>@loginError</p>
			</div>
		}

		<div class="space-y-6">
			<!-- Email/Username Field -->
			<div>
				<label for="email" class="block text-gray-700 font-medium mb-2">Email or username</label>
				<div class="relative">
					<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-gray-400">
							<path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
							<circle cx="12" cy="7" r="4"></circle>
						</svg>
					</div>
					<InputText id="email" @bind-Value="Model!.Email"
							   class="w-full pl-10 pr-3 py-2 border-b-2 border-gray-300 focus:border-primary focus:outline-none transition-colors duration-200"
							   placeholder="Enter your email or username" />
				</div>
				<ValidationMessage For="@(() => Model.Email)" class="text-red-500 text-sm mt-1 block" />
			</div>

			<!-- Password Field -->
			<div>
				<label for="password" class="block text-gray-700 font-medium mb-2">Password</label>
				<div class="relative">
					<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-gray-400">
							<rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
							<path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
						</svg>
					</div>
					<InputText id="password" type="password" @bind-Value="Model!.Password"
							   class="w-full pl-10 pr-3 py-2 border-b-2 border-gray-300 focus:border-primary focus:outline-none transition-colors duration-200"
							   placeholder="Enter your password" />
				</div>
				<ValidationMessage For="@(() => Model.Password)" class="text-red-500 text-sm mt-1 block" />
			</div>

			<!-- Remember Me & Forgot Password -->
			<div class="flex items-center justify-between">
				<div class="flex items-center">
					<InputCheckbox id="rememberMe" @bind-Value="Model.RememberMe"
								   class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded" />
					<label for="rememberMe" class="ml-2 block text-gray-700">Remember me</label>
				</div>
				<a href="#" class="text-sm text-gray-600 hover:text-gray-800 hover:underline transition-colors duration-200">
					Forgot password?
				</a>
			</div>

			<!-- Action Buttons -->
			<div class="flex space-x-4 pt-2">
				<a href="/" class="w-1/2 flex items-center justify-center px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition-colors duration-200">
					Cancel
				</a>
				<button type="submit" class="w-1/2 bg-green-500 hover:bg-green-300 text-white px-4 py-2 rounded-lg transition-colors duration-200 hover:shadow-md transform hover:-translate-y-0.5">
					Login
				</button>
			</div>

			<!-- Sign Up Link -->
			<div class="text-center pt-4">
				<p class="text-gray-600">
					Don't have an account?
					<a href="#" class="text-primary hover:text-primary-dark font-medium hover:underline transition-colors duration-200">
						Sign up
					</a>
				</p>
			</div>
		</div>
	</EditForm>
</div>

@code {
	[SupplyParameterFromForm]
	private LoginModel? Model { get; set; }

	protected override void OnInitialized()
	{
		if (Model == null)
		{
			Model = new LoginModel();
		}
	}

	// Used to display a general login error message (e.g., authentication failure).
	private string loginError = string.Empty;

	private async Task HandleValidSubmit()
	{
		Console.WriteLine(Model.Email);
		var result = await SignInManager.PasswordSignInAsync(
			Model.Email, Model.Password, Model.RememberMe, lockoutOnFailure: false
		);

		if (!result.Succeeded)
		{
			loginError = "Invalid login attempt. Please check your credentials.";
		}
		else
		{
			var user = await UserManager.FindByEmailAsync(Model.Email);
			var roles = await UserManager.GetRolesAsync(user);

			if (roles.Contains("Admin"))
			{
				Navigation.NavigateTo("/Admin", true);
			}
			else
			{
				Navigation.NavigateTo("/User", true);
			}
		}
	}

	public class LoginModel
	{
		[Required]
		[EmailAddress]
		public string? Email { get; set; }

		[Required]
		[DataType(DataType.Password)]
		public string? Password { get; set; }

		[Display(Name = "Remember Me")]
		public bool RememberMe { get; set; }
	}
}