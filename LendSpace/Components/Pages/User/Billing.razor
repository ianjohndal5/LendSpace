@page "/User/Billing"
@rendermode InteractiveServer
@attribute [Authorize(Policy = "UserOnly")]

@inject ApplicationDbContext Context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<UserModel> UserManager

<style>
	body {
		background-color: whitesmoke;
	}

	html {
		scroll-behavior: smooth;
		overflow-y: scroll;
		overflow-x: hidden;
		font-family: 'PT Sans Narrow', sans-serif;
	}

		html::-webkit-scrollbar {
			width: 8px;
		}

		html::-webkit-scrollbar-track {
			background: #f0f0f0;
		}

		html::-webkit-scrollbar-thumb {
			background-color: #888;
			border-radius: 4px;
			border: 2px solid #f0f0f0;
		}

			html::-webkit-scrollbar-thumb:hover {
				background-color: #555;
			}
</style>
<div class="text-center mb-2">
	<h2 class="text-3xl font-bold mb-2">List of Billings</h2>
	<p class="text-gray-600">Manage your billing records</p>
	<div class="h-1 w-20 bg-green-500 mx-auto mt-4"></div>
</div>
<div class="min-h-screen w-full px-8">
	<div class="max-w-6xl mx-auto">

		<div class="flex flex-col md:flex-row justify-between gap-2 my-2">
			<div class="flex-1">
				<Card>
					<p class="text-sm text-gray-500 mb-1">Balance</p>
					<p class="text-2xl font-bold text-emerald-600">₱@balance.ToString("N2")</p>
				</Card>
			</div>
			<div class="flex-1">
				<Card>
					<p class="text-sm text-gray-500 mb-1">Unpaid bills</p>
					<p class="text-2xl font-bold text-red-600">@unpaidCount</p>
				</Card>
			</div>
		</div>

		<div class="my-2">
			<h2 class="text-xl font-semibold text-gray-800">All Billings</h2>
			<p class="text-gray-600">History of your billings</p>
		</div>
		<div class="flex flex-row justify-between">
			<div class="flex flex-row items-center p-2 gap-x-2">
				<p>Page Size: </p>
				<Selection Label="Select" T="int" DefaultValue="pageSize" Options="@pageSizeOptions" OnChangeOption="OnChangePagesize" />
			</div>
		</div>
		<div class="bg-white rounded-lg shadow overflow-x-scroll">
			<table class="min-w-full divide-y divide-gray-200">
				<thead class="bg-gray-100">
					<tr>
						<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
						<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
						<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Issued At</th>
						<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
					</tr>
				</thead>
				<tbody class="bg-white divide-y divide-gray-200">
					@foreach (var billing in billings!)
					{
						<tr class="hover:bg-gray-50">
							<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@billing.Name</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">₱@billing.Amount.ToString("N2")</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@billing.IssuedAt.ToString("MMM dd, yyyy")</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm">
								@* Unpaid *@
								@if (billing!.Status == BillingStatus.Unpaid)
								{
									<span class="px-2 py-1 text-xs font-bold text-white rounded bg-red-500">
										Unpaid
									</span>
								}
								@* Paid *@
								else
								{
									<span class="px-2 py-1 text-xs font-bold text-white rounded bg-green-500">
										Paid
									</span>
								}
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		<div class="p-2 flex flex-row justify-center">
			<Pagination TotalPages="totalPages" OnPageChanged="OnChangePageNo" />
		</div>
	</div>
</div>

@code {

	private UserModel? currentUser { get; set; }
	private IEnumerable<BillingModel>? billings { get; set; }

	private double balance { get; set; }
	private int unpaidCount { get; set; }

	private int[] pageSizeOptions = [ 5, 10, 20, 50, 100];
	private int totalPages { get; set; }
	private int pageSize { get; set; }
	private int currentPage { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var userPrincipal = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		currentUser ??= await UserManager.GetUserAsync(userPrincipal.User);

		currentPage = 1;
		pageSize = 5;

		LoadBillings();
	}

	private void LoadBillings()
	{
		// pagination bullshit
		int totalBillings = Context.Billing.Count();
		totalPages = (int)Math.Ceiling(totalBillings / (double)pageSize);

		billings = Context.Billing
			.Where(b => b.UserId == currentUser!.Id)
			.Skip((currentPage - 1) * pageSize)
			.Take(pageSize)
			.ToArray();

		balance = Context.Billing.Sum(b => b.Amount);
		unpaidCount = Context.Billing.Where(b => b.Status == BillingStatus.Unpaid).Count();
	}

	private string StatusColor(bool isPaid)
	{
		return isPaid ? "bg-green-400" : "bg-yellow-400";
	}

	private void OnChangePagesize(int size)
	{
		Console.WriteLine(size);
		pageSize = size;
		LoadBillings();
	}

	private void OnChangePageNo(int page)
	{
		currentPage = page;
		LoadBillings();
	}
}