@page "/User/Facility"
@rendermode InteractiveServer
@attribute [Authorize(Policy = "UserOnly")]

@using LendSpace.Models
@using LendSpace.Models.Enums
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.Toast.Services
@inject ApplicationDbContext Context
@inject UserManager<UserModel> UserManager
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService ToastService

<PageTitle>Facilities</PageTitle>
<style>
	body {
		background-color: whitesmoke;
	}

	html {
		scroll-behavior: smooth;
		overflow-y: scroll;
		overflow-x: hidden;
		font-family: 'PT Sans Narrow', sans-serif;
	}

		html::-webkit-scrollbar {
			width: 8px;
		}

		html::-webkit-scrollbar-track {
			background: #f0f0f0;
		}

		html::-webkit-scrollbar-thumb {
			background-color: #888;
			border-radius: 4px;
			border: 2px solid #f0f0f0;
		}

			html::-webkit-scrollbar-thumb:hover {
				background-color: #555;
			}
</style>
<div class="text-center">
	<h2 class="text-3xl font-bold mb-2">Facilities</h2>
	<p class="text-gray-600">Explore and Book a facility with your preferences!</p>
	<div class="h-1 w-20 bg-green-500 mx-auto mt-4"></div>
</div>
<div class="min-h-screen w-full px-8">

	<header class=" px-20">

		<div class="w-full mx-auto items-center flex justify-between">
			<div class="items-center flex">
				<h1 class="text-lg text-gray-800 mr-3">Search</h1>
				<div class="relative">
					<input type="text"
						   class="w-full pl-12 pr-4 py-3 border border-gray-300 shadow-sm"
						   placeholder="Search facilities by name or description..."
						   @oninput="@(e => SearchFacilities(e.Value?.ToString()))" />
					<svg class="absolute left-3 top-3.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
					</svg>
				</div>
			</div>
		</div>
		<div class="border-b-3 border-gray-300 mt-3 w-full"></div>
	</header>

	<!-- Facilities Grid -->
	<div class="grid grid-cols-1 sm:grid-cols-1 lg:grid-cols-2 xl:grid-cols-1 mt-5 gap-6 px-20 items-center">

		@foreach (var facility in filteredFacilities!)
		{
			<div class="bg-white rounded-lg shadow-md overflow-hidden">
				<!-- Facility Card Content -->
				<div class="flex">
					<div class="relative h-48 overflow-hidden w-150 h-80">
						<img src="@Assets["uploads/" + facility.ImagePath]"
							 alt="@facility.Name"
							 class="w-full h-full object-cover" />
						<div class="absolute top-2 right-2">
							<span class="@(facility.Available ? "bg-emerald-100 text-emerald-800" : "bg-red-100 text-red-800") text-xs font-semibold px-2.5 py-0.5 rounded-full">
								@(facility.Available ? "Available" : "Unavailable")
							</span>
						</div>
						<div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4">
							<h3 class="text-xl font-semibold text-white">@facility.Name</h3>
						</div>
					</div>
					<div class="p-4 w-50">
						<div class="flex items-center text-sm text-gray-500 mb-2">
							<i class="fas fa-map-marker-alt mr-1.5 text-xs"></i>
							<span class="truncate">@facility.Address</span>
						</div>
						<p class="text-gray-700 text-sm line-clamp-2 mb-3">@facility.Description</p>

						<!-- View Facility Button -->
						<button @onclick="() => OpenFacilityModal(facility)" class="mt-4 bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-md text-sm font-medium transition-colors">
							View Facility
						</button>
					</div>
				</div>
			</div>
		}
	</div>
</div>
<!-- Step 1: Facility Details Modal -->
@if (showFacilityModal && selectedFacility != null)
{
	<div class="fixed inset-0 bg-gray-500/50 flex items-center justify-center z-40 p-4"
		 @onclick="CloseFacilityModal">
		<div class="bg-white rounded-lg shadow-xl p-0 w-full max-w-3xl mx-auto overflow-hidden max-h-[90vh] flex flex-col"
			 @onclick:stopPropagation="true">
			<!-- Modal Header with close button -->
			<div class="relative">
				
				<img src="@Assets["uploads/" + selectedFacility.ImagePath]"
					 alt="@selectedFacility.Name"
					 class="w-full h-48 sm:h-64 object-cover" />
				<button @onclick="CloseFacilityModal" class="absolute top-4 right-4 text-white p-2 rounded-full hover:bg-opacity-70">
					<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</button>
				<div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4 sm:p-6">
					<h2 class="text-xl sm:text-2xl font-bold text-white">@selectedFacility.Name</h2>
					<div class="flex items-center text-white/80 mt-1">
						<i class="fas fa-map-marker-alt mr-1.5"></i>
						<span>@selectedFacility.Address</span>
					</div>
				</div>
			</div>

			<!-- Modal Content -->
			<div class="p-4 sm:p-6 overflow-y-auto flex-1">
				<div class="mb-4 sm:mb-6">
					<h3 class="text-lg font-semibold mb-2">About this facility</h3>
					<p class="text-gray-600">
						@selectedFacility.Description
					</p>
				</div>

				<div class="mb-4 sm:mb-6">
					<h3 class="text-lg font-semibold mb-2">Booking Details</h3>
					<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Check-in Date</label>
							<input type="date" @bind="bookingInfo.CheckInDate" class="border border-gray-300 rounded-md px-3 py-2 w-full" min="@DateTime.Now.ToString("yyyy-MM-dd")" />
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Check-out Date</label>
							<input type="date" @bind="bookingInfo.CheckOutDate" class="border border-gray-300 rounded-md px-3 py-2 w-full" min="@DateTime.Now.AddDays(1).ToString("yyyy-MM-dd")" />
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Guests</label>
							<select @bind="bookingInfo.GuestCount" class="border border-gray-300 rounded-md px-3 py-2 w-full">
								@for (int i = 1; i <= 10; i++)
								{
									<option value="@i">@i @(i == 1 ? "guest" : "guests")</option>
								}
							</select>
						</div>
						<div class="col-span-full">
							<label class="block text-sm font-medium text-gray-700 mb-1">Purpose of Booking</label>
							<input type="text" @bind="bookingInfo.Title" class="border border-gray-300 rounded-md px-3 py-2 w-full" placeholder="e.g. Family Gathering, Birthday Party, etc." />
						</div>
						<div class="col-span-full">
							<label class="block text-sm font-medium text-gray-700 mb-1">Additional Details</label>
							<textarea @bind="bookingInfo.Description" class="border border-gray-300 rounded-md px-3 py-2 w-full h-20" placeholder="Any specific requirements or details about your booking..."></textarea>
						</div>
					</div>
				</div>

				<div class="flex justify-between items-center border-t border-gray-200 pt-4 mt-4">
					<div>
						<p class="text-xl sm:text-2xl font-bold">$@selectedFacility.Pricing <span class="text-gray-500 text-sm font-normal">/night</span></p>
						<p class="text-sm text-gray-500">+ taxes and fees</p>
					</div>
					<button @onclick="OpenPaymentModal" class="bg-green-600 hover:bg-green-700 text-white py-2 sm:py-3 px-4 sm:px-6 rounded-md font-medium">
						Book Now
					</button>
				</div>
			</div>
		</div>
	</div>
}

<!-- Step 2: Payment Modal -->
@if (showPaymentModal && selectedFacility != null)
{
	<div class="fixed inset-0 bg-gray-500/50 flex items-center justify-center z-50 p-4"
		 @onclick="ClosePaymentModal">
		<div class="bg-white rounded-lg shadow-xl p-4 sm:p-6 w-full max-w-2xl mx-auto overflow-y-auto max-h-[90vh]"
			 @onclick:stopPropagation="true">
			<div class="flex justify-between items-center mb-4 sm:mb-6">
				<h2 class="text-xl sm:text-2xl font-bold">Complete Your Booking</h2>
				<button @onclick="ClosePaymentModal" class="text-gray-500 hover:text-gray-700">
					<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</button>
			</div>

			<!-- Booking Summary -->
			<div class="bg-gray-50 p-4 rounded-lg mb-4 sm:mb-6">
				<h3 class="font-semibold mb-2">Booking Summary</h3>
				<div class="flex justify-between mb-1">
					<span>Facility:</span>
					<span class="font-medium">@selectedFacility.Name</span>
				</div>
				<div class="flex justify-between mb-1">
					<span>Purpose:</span>
					<span class="font-medium">@bookingInfo.Title</span>
				</div>
				<div class="flex justify-between mb-1">
					<span>Dates:</span>
					<span class="font-medium">@bookingInfo.CheckInDate.ToString("MMM dd") - @bookingInfo.CheckOutDate.ToString("MMM dd, yyyy")</span>
				</div>
				<div class="flex justify-between mb-1">
					<span>Guests:</span>
					<span class="font-medium">@bookingInfo.GuestCount</span>
				</div>
				<div class="border-t border-gray-200 my-2"></div>
				@{
					int nights = (bookingInfo.CheckOutDate - bookingInfo.CheckInDate).Days;
					decimal pricePerNight = (decimal)selectedFacility.Pricing;
					decimal subtotal = pricePerNight * nights;
					decimal taxes = subtotal * 0.15m;
					decimal total = subtotal + taxes;
					bookingInfo.TotalAmount = total;
				}
				<div class="flex justify-between mb-1">
					<span>$@pricePerNight x @nights nights:</span>
					<span class="font-medium">$@subtotal</span>
				</div>
				<div class="flex justify-between mb-1">
					<span>Taxes & fees (15%):</span>
					<span class="font-medium">$@taxes.ToString("0.00")</span>
				</div>
				<div class="flex justify-between font-bold text-lg mt-2">
					<span>Total:</span>
					<span>$@total.ToString("0.00")</span>
				</div>
				<div class="mt-4 text-sm text-gray-500">
					<p class="font-medium">Booking Status:</p>
					<p>Your booking will require staff approval before it's confirmed. You'll receive an email notification when your booking is reviewed.</p>
				</div>
			</div>

			<!-- Payment Information -->
			<div class="mb-4 sm:mb-6">
				<h3 class="font-semibold mb-3">Payment Information</h3>
				<div class="mb-4">
					<label class="block text-sm font-medium text-gray-700 mb-1">Card Number</label>
					<input type="text" class="w-full border border-gray-300 rounded-md px-3 py-2" placeholder="1234 5678 9012 3456" />
				</div>
				<div class="flex flex-col sm:flex-row gap-4 mb-4">
					<div class="w-full sm:w-1/2">
						<label class="block text-sm font-medium text-gray-700 mb-1">Expiration Date</label>
						<input type="text" class="w-full border border-gray-300 rounded-md px-3 py-2" placeholder="MM/YY" />
					</div>
					<div class="w-full sm:w-1/2">
						<label class="block text-sm font-medium text-gray-700 mb-1">CVV</label>
						<input type="text" class="w-full border border-gray-300 rounded-md px-3 py-2" placeholder="123" />
					</div>
				</div>
				<div class="mb-4">
					<label class="block text-sm font-medium text-gray-700 mb-1">Name on Card</label>
					<input type="text" class="w-full border border-gray-300 rounded-md px-3 py-2" placeholder="John Smith" />
				</div>
			</div>

			<!-- Terms and Conditions -->
			<div class="mb-4 sm:mb-6">
				<div class="flex items-center gap-2">
					<input type="checkbox" @bind="bookingInfo.AgreeToTerms" id="agreeTerms" />
					<label for="agreeTerms" class="text-sm text-gray-700">I agree to the terms and conditions and cancellation policy</label>
				</div>
			</div>

			<!-- Submit Button -->
			<div class="flex justify-end">
				<button @onclick="ProcessBooking" class="bg-green-600 hover:bg-green-700 text-white py-2 sm:py-3 px-4 sm:px-6 rounded-md font-medium @(bookingInfo.AgreeToTerms ? "" : "opacity-50 cursor-not-allowed")" disabled="@(!bookingInfo.AgreeToTerms || string.IsNullOrEmpty(bookingInfo.Title))">
					Submit Booking Request
				</button>
			</div>
		</div>
	</div>
}

<!-- Confirmation Modal -->
@if (showConfirmationModal)
{
	<div class="fixed inset-0 bg-gray-500/50 flex items-center justify-center z-50 p-4"
		 @onclick="CloseConfirmationModal">
		<div class="bg-white rounded-lg shadow-xl p-4 sm:p-6 w-full max-w-md mx-auto text-center"
			 @onclick:stopPropagation="true">
			<div class="mb-4">
				<div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
					<svg class="h-6 w-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
					</svg>
				</div>
			</div>
			<h3 class="text-lg font-medium text-gray-900 mb-2">Booking Request Submitted!</h3>
			<p class="text-gray-500 mb-6">Your booking request has been submitted for review. You'll receive a notification when staff approves or rejects your request.</p>
			<div class="flex justify-center">
				<button @onclick="CloseConfirmationModal" class="bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md font-medium">
					Close
				</button>
			</div>
		</div>
	</div>
}

@code {
	private string searchTerm = string.Empty;
	private FacilityModel selectedFacility;
	private BookingInfo bookingInfo = new BookingInfo();
	private string currentUserId;

	private IEnumerable<FacilityModel> facilities;
	private IEnumerable<FacilityModel> filteredFacilities;
	private bool showFacilityModal = false;
	private bool showPaymentModal = false;
	private bool showConfirmationModal = false;

	// Booking info model for the booking form
	private class BookingInfo
	{
		public DateTime CheckInDate { get; set; } = DateTime.Now.AddDays(1);
		public DateTime CheckOutDate { get; set; } = DateTime.Now.AddDays(3);
		public int GuestCount { get; set; } = 2;
		public string Title { get; set; } = string.Empty;
		public string Description { get; set; } = string.Empty;
		public decimal TotalAmount { get; set; } = 0;
		public bool AgreeToTerms { get; set; } = false;
	}

	protected override async Task OnInitializedAsync()
	{
		// Get current user ID using AuthenticationStateProvider
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = await UserManager.GetUserAsync(authState.User);
		currentUserId = user?.Id;

		// Get facilities from database
		facilities = Context.Facility.ToList();
		ApplyFilters();
	}

	private void ApplyFilters()
	{
		if (facilities == null)
			return;

		filteredFacilities = facilities
			.Where(f => string.IsNullOrEmpty(searchTerm) ||
						f.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
						f.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
						f.Address.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
			.ToList();
	}
	private void SearchFacilities(string value)
	{
		searchTerm = value ?? string.Empty;
		ApplyFilters();
	}

	private string GetImagePath(string imagePath)
	{
		// Default image if none is provided
		if (string.IsNullOrEmpty(imagePath))
		{
			return "https://images.unsplash.com/photo-1564013799919-ab600027ffc6?ixlib=rb-4.0.3&auto=format&fit=crop&w=1470&q=80";
		}

		// If the path already has http/https, assume it's a full URL
		if (imagePath.StartsWith("http://") || imagePath.StartsWith("https://"))
		{
			return imagePath;
		}

		// If the path starts with a slash, assume it's a relative path from the root
		if (imagePath.StartsWith("/"))
		{
			return imagePath;
		}

		// Otherwise, it might be a relative path that needs to be prefixed with the base URL
		return $"/{imagePath.TrimStart('/')}";
	}

	private void OpenFacilityModal(FacilityModel facility)
	{
		selectedFacility = facility;
		showFacilityModal = true;
		bookingInfo = new BookingInfo();
	}

	private void CloseFacilityModal()
	{
		showFacilityModal = false;
	}

	private void OpenPaymentModal()
	{
		// Validate input before proceeding
		if (string.IsNullOrWhiteSpace(bookingInfo.Title))
		{
			ToastService.ShowError("Please provide a purpose for your booking.");
			return;
		}

		if (bookingInfo.CheckInDate >= bookingInfo.CheckOutDate)
		{
			ToastService.ShowError("Check-out date must be after check-in date.");
			return;
		}

		showPaymentModal = true;
	}

	private void ClosePaymentModal()
	{
		showPaymentModal = false;
	}

	private async Task ProcessBooking()
	{
		if (!bookingInfo.AgreeToTerms || string.IsNullOrEmpty(bookingInfo.Title))
			return;

		try
		{
			// Create new reservation
			var reservation = new ReservationModel
				{
					Id = Guid.NewGuid().ToString(),
					Title = bookingInfo.Title,
					Description = bookingInfo.Description,
					FacilityId = selectedFacility.Id,
					UserId = currentUserId,
					StartsAt = DateOnly.FromDateTime(bookingInfo.CheckInDate),
					EndsAt = DateOnly.FromDateTime(bookingInfo.CheckOutDate),
					GuestCount = bookingInfo.GuestCount,
					TotalAmount = bookingInfo.TotalAmount,
					Status = ReservationStatus.Pending,
					CreatedAt = DateTime.Now
				};

			// Save reservation to database
			Context.Reservations.Add(reservation);

			// Create a billing record for this reservation
			var billing = new BillingModel
				{
					Id = Guid.NewGuid().ToString(),
					Name = $"Facility Booking: {selectedFacility.Name} ({bookingInfo.CheckInDate.ToString("MMM dd")} - {bookingInfo.CheckOutDate.ToString("MMM dd")})",
					Amount = (double)bookingInfo.TotalAmount,
					UserId = currentUserId,
					Status = BillingStatus.Unpaid,
					IssuedAt = DateOnly.FromDateTime(DateTime.Now)
				};

			// Save billing to database
			Context.Billing.Add(billing);
			await Context.SaveChangesAsync();

			// Show confirmation and close modals
			ClosePaymentModal();
			showConfirmationModal = true;
		}
		catch (Exception ex)
		{
			ToastService.ShowError($"Error creating reservation: {ex.Message}");
		}
	}

	private void CloseConfirmationModal()
	{
		showConfirmationModal = false;
		CloseFacilityModal();
	}
}