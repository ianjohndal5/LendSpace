@page "/User/Announcement"
@rendermode InteractiveServer
@attribute [Authorize]

@using LendSpace.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Context

<PageTitle>Events</PageTitle>

<div class="min-h-screen w-full bg-gray-100 p-8">
	<header class="mb-8">
		<div class="max-w-4xl mx-auto">
			<h1 class="text-3xl font-bold text-gray-800 mb-2">Announcements</h1>

			<div class="relative mt-4">
				<input type="text"
					   class="w-full pl-12 pr-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent shadow-sm"
					   placeholder="Search events by name or description..."
					   @bind="searchTerm"
					   @bind:event="oninput" />
				<svg class="absolute left-3 top-3.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
				</svg>
			</div>
		</div>
	</header>

	<div class="max-w-4xl mx-auto">
		@if (announcements == null)
		{
			<div class="text-center py-8">
				<div class="animate-pulse space-y-4">
					<div class="h-4 bg-gray-200 rounded w-1/4 mx-auto"></div>
				</div>
			</div>
		}
		else if (!FilteredAnnouncements.Any())
		{
			<div class="text-center py-8 text-gray-500">
				@if (string.IsNullOrWhiteSpace(searchTerm))
				{
					<span>No announcements found</span>
				}
				else
				{
					<span>No announcements found matching <strong>"@searchTerm"</strong></span>
				}
			</div>
		}
		else
		{
			<div class="space-y-4">
				@foreach (var announcement in FilteredAnnouncements)
				{
					<Card ClassName="group bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 border border-gray-200 hover:border-emerald-500">
						<div class="p-6">
							<div class="flex justify-between items-start">
								<div class="flex-1">
									<h3 class="text-xl font-semibold text-gray-800 mb-1">@announcement.Heading</h3>
									<div class="flex items-center space-x-2 text-sm text-blue-600 font-medium">
										<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
										</svg>
										<time>@announcement.PostedAt</time>
									</div>
								</div>
							</div>
							<p class="mt-3 text-gray-600 line-clamp-2">@announcement.Body</p>
						</div>
					</Card>
				}
			</div>
		}
	</div>
</div>

@code {
	private List<AnnouncementModel>? announcements;
	private string searchTerm = string.Empty;

	private List<AnnouncementModel> FilteredAnnouncements =>
		announcements?
			.Where(e =>
				(e.Heading?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
			.OrderBy(e => e.PostedAt)
			.ToList()
		?? new List<AnnouncementModel>();

	protected override async Task OnInitializedAsync()
	{
		announcements = await Context.Announcements
			.OrderBy(e => e.PostedAt)
			.ToListAsync();
	}
}