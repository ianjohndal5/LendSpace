@page "/Staff/Facility"
@rendermode InteractiveServer
@attribute [Authorize(Policy = "StaffOnly")]

@inject ApplicationDbContext Context
@inject FileManager FileManager
@inject DialogManager DialogManager

<PageTitle>Facilities</PageTitle>

<main class="w-full h-full p-4">
	<div class="max-w-7xl mx-auto px-4 py-8">
		<div class="">
			<h1 class="text-3xl font-bold text-gray-900 mb-4">Facilities</h1>
			<div class="flex flex-row justify-end">
				<button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-6" @onclick="AddFacility">
					Add Facility
				</button>
			</div>

			@* Facility List *@
			@if (facilities != null && facilities.Any())
			{
				@foreach (var facility in facilities)
				{
							<div class="bg-white shadow rounded-lg overflow-hidden mb-6 hover:shadow-md transition-shadow flex flex-col">
								<div>
									<!-- Adjusted Image: Fixed height of 8rem (h-32) and full width -->
									<img class="w-full h-32 object-cover rounded" src="@Assets["uploads/" + facility.ImagePath]" alt="@facility.Name" />
								</div>
								<div class="p-4 w-full">
									<!-- Header: Facility Title with Availability -->
									<div class="flex justify-between items-center mb-4">
										<div>
											<h2 class="text-xl font-bold text-gray-800">@facility.Name</h2>
										</div>
										<span class="px-3 py-1 rounded-full text-xs font-bold text-white @(facility.Available ? "bg-green-500" : "bg-red-500")">
									@(facility.Available ? "Available" : "Unavailable")
										</span>
									</div>

									<!-- Pricing Section -->
									<div class="mb-4">
										<p class="text-gray-700">
											<span class="font-semibold">Pricing:</span>
											<span class="ml-1">₱@facility.Pricing <span class="text-sm">/ per day</span></span>
										</p>
									</div>

									<!-- Description Section -->
									<div class="mb-4">
										<p class="text-gray-700">
											<span class="font-semibold">Description:</span>
											<span class="ml-1">@facility.Description</span>
										</p>
									</div>

									<!-- Address Section -->
									<div class="mb-4">
										<div class="flex items-center gap-2">
											<svg class="w-5 h-5 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
												<path fill-rule="evenodd" d="M10 2C6.686 2 4 4.686 4 8c0 4.866 6 10 6 10s6-5.134 6-10c0-3.314-2.686-6-6-6zm0 8a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
											</svg>
											<p class="text-gray-700">
												<span class="font-semibold">Address:</span>
												<span class="ml-1">@facility.Address</span>
											</p>
										</div>
									</div>

									<!-- Action Buttons -->
									<div class="p-3 flex flex-row gap-4">
										<button class="text-emerald-600 text-sm font-medium hover:text-emerald-800" @onclick="() => EditFacility(facility.Id!)">
											Edit
										</button>
										<button class="text-red-600 text-sm font-medium hover:text-red-800" @onclick="() => DeleteFacility(facility.Id!)">
											Delete
										</button>
									</div>
								</div>
							</div>
				}
			}
			else
			{
					<p class="text-gray-600">No facilities found.</p>
			}
		</div>
	</div>
</main>

<Modal Show="showModal">
	<div class="p-4 w-full md:w-[300px]">
		<h1 class="text-2xl font-bold">@(!edit ? "Add Facility" : "Edit Facility")</h1>
		<EditForm Model="model" OnValidSubmit="Confirm">
			<div class="mb-4">
				<label class="block text-gray-700">File</label>
				<InputFile OnChange="LoadImages" />
			</div>
			<div class="mb-4">
				<label class="block text-gray-700">Name</label>
				<InputText @bind-Value="model!.Name" class="w-full border rounded p-2" />
				<ValidationMessage For="() => model.Name" />
			</div>
			<div class="mb-4">
				<label class="block text-gray-700">Description</label>
				<InputText @bind-Value="model!.Description" class="w-full border rounded p-2" />
				<ValidationMessage For="() => model.Description" />
			</div>
			<div class="mb-4">
				<label class="block text-gray-700">Address</label>
				<InputText @bind-Value="model!.Address" class="w-full border rounded p-2" />
				<ValidationMessage For="() => model.Address" />
			</div>
			<div class="mb-4">
				<label class="block text-gray-700">Pricing</label>
				<InputNumber @bind-Value="model!.Pricing" class="w-full border rounded p-2" />
				<ValidationMessage For="() => model.Pricing" />
			</div>
			<div class="mb-4 flex items-center">
				<InputCheckbox @bind-Value="model!.Available" class="mr-2" />
				<label class="text-gray-700">Available</label>
			</div>
			<div class="flex justify-end space-x-2">
				<button type="submit" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">Save</button>
				<button type="button" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded" @onclick="Close">
					Cancel
				</button>
			</div>
		</EditForm>
	</div>
</Modal>

@code {
	private FacilityModel[]? facilities;

	private FacilityModel? model { get; set; }
	private List<IBrowserFile> images = new List<IBrowserFile>();
	private bool edit = false;
	private bool showModal = false;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		FetchData();

		model = new FacilityModel();
	}

	private void FetchData()
	{
		facilities = Context.Facility.ToArray();
	}

	private void AddFacility()
	{
		edit = false;
		model = new FacilityModel
			{
				Id = Guid.NewGuid().ToString(),
				Name = string.Empty,
				Pricing = 0,
				Address = "",
				Available = true,
				Description = string.Empty
			};
		showModal = true;
		images.Clear(); // Clear any previously selected images
	}

	private void EditFacility(string id)
	{
		edit = true;
		model = Context.Facility.Find(id);
		if (model == null)
		{
			return;
		}

		showModal = true;
		images.Clear(); // Clear any previously selected images
	}

	private async Task DeleteFacility(string id)
	{
		var confirmed = await DialogManager.ShowDialogAsync("Confirm Delete", "Proceed?");
		if (!confirmed)
		{
			return;
		}

		var temp = await Context.Facility.FindAsync(id);
		if (temp != null)
		{
			Context.Facility.Remove(temp);
			await Context.SaveChangesAsync();
			FetchData();
		}
	}

	private void Close()
	{
		edit = false;
		showModal = false;
		images.Clear(); // Clear selected images when closing the modal
	}

	private async Task Confirm()
	{
		if (model == null)
			return;

		if (edit)
		{
			var confirmed = await DialogManager.ShowDialogAsync("Confirm Edit", "Proceed?");
			if (!confirmed)
			{
				return;
			}

			if (images.Any())
			{
				var paths = await FileManager.UploadFiles(images);
				model.ImagePath = images.First().Name; // Add this line to update the ImagePath when editing
				foreach (var path in paths)
				{
					Console.WriteLine(path);
				}
			}

			Context.Facility.Update(model);
			Context.SaveChanges();
		}
		else
		{
			var confirmed = await DialogManager.ShowDialogAsync("Confirm Add", "Proceed?");
			if (!confirmed)
			{
				return;
			}

			if (images.Any())
			{
				await FileManager.UploadFiles(images);
				model.ImagePath = images.First().Name;
			}

			Context.Facility.Add(model);
			await Context.SaveChangesAsync();
		}

		FetchData();
		showModal = false;
		images.Clear(); // Clear images after processing
	}

	private void LoadImages(InputFileChangeEventArgs e)
	{
		images.Clear(); // Clear previous selections
		foreach (var file in e.GetMultipleFiles())
		{
			images.Add(file);
		}
	}
}